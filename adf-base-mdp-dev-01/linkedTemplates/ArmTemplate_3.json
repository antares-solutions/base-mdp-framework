{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-base-mdp-dev-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/System')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[ExtractLoadInit]",
								"storedProcedureParameters": {
									"BatchID": {
										"value": {
											"value": "@variables('ParentBatchID')",
											"type": "Expression"
										}
									},
									"SystemCode": {
										"value": {
											"value": "@pipeline().parameters.SystemCode",
											"type": "Expression"
										}
									},
									"StartSourceID": {
										"value": {
											"value": "@pipeline().parameters.StartSourceID",
											"type": "Expression"
										}
									},
									"EndSourceID": {
										"value": {
											"value": "@pipeline().parameters.EndSourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute-raw",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Raw",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(coalesce(pipeline().parameters.ParentBatchID, pipeline().GroupId), 0,8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "for-each-trusted",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "for-each-raw",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute-trusted",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Trusted",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "end-system",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "for-each-trusted",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "UPDATE U\nSET [EndedDTS] = CONVERT(DATETIME, CONVERT(DATETIMEOFFSET, GETDATE()) AT TIME ZONE 'AUS Eastern Standard Time')\nFROM [dbo].[ExtractLoadStatus] U\nWHERE BatchID = '@{variables('ParentBatchID')}'\nAND SystemCode = '@{pipeline().parameters.SystemCode}'\nSELECT 1 A",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SystemCode": {
						"type": "string",
						"defaultValue": "System"
					},
					"ParentBatchID": {
						"type": "string"
					},
					"StartSourceID": {
						"type": "int"
					},
					"EndSourceID": {
						"type": "int"
					}
				},
				"variables": {
					"ParentBatchID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-transform",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[TransformInit]",
								"storedProcedureParameters": {
									"BatchID": {
										"value": {
											"value": "@variables('ParentBatchID')",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "set-list",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "list",
							"value": {
								"value": "@activity('get-transform').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "for-each-group",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "if-synapse-resume",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@split(string(variables('list')[0].List), ',')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "if-failed",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('has-failed'), bool(1))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "filter-grouping",
												"type": "Filter",
												"dependsOn": [
													{
														"activity": "set-current-group",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"items": {
														"value": "@variables('list')",
														"type": "Expression"
													},
													"condition": {
														"value": "@equals(int(item().ParallelGroup), int(variables('current-group')))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-current-group",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "current-group",
													"value": {
														"value": "@item()",
														"type": "Expression"
													}
												}
											},
											{
												"name": "execute-curated-parallel",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "filter-grouping",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Curated-Parallel",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"taskList": {
															"value": "@activity('filter-grouping').output.value",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "set-has-failed",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "execute-curated-parallel",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "has-failed",
													"value": true
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "if-fail-pipeline",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for-each-group",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('has-failed'), bool(1))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "fail-pipeline",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Inner pipeline failed",
										"errorCode": "-1"
									}
								}
							]
						}
					},
					{
						"name": "distinct-processors",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "set-list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "if-synapse-processing",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(contains(item().ProcessorType, 'synapse')\n,not(contains(variables('list'), item().ProcessorType)))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "append-list",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "distinct-list",
													"value": {
														"value": "@item().ProcessorType",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "if-synapse-resume",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "distinct-processors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@less(length(variables('list')), -1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "resume-synapse",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "synapse-operation",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"operation": "resume"
										}
									}
								}
							]
						}
					},
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(coalesce(pipeline().parameters.ParentBatchID, pipeline().GroupId), 0,8)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ParentBatchID": {
						"type": "string"
					}
				},
				"variables": {
					"list": {
						"type": "Array"
					},
					"current-group": {
						"type": "String"
					},
					"filtered-list": {
						"type": "Array"
					},
					"has-failed": {
						"type": "Boolean",
						"defaultValue": false
					},
					"distinct-list": {
						"type": "Array"
					},
					"ParentBatchID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-extract-load",
						"description": " ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @SystemCodes VARCHAR(50) = '@{pipeline().parameters.SystemCodes}';\nDECLARE @BatchSize INT = @{pipeline().parameters.BatchSize};\nWITH\n    [_SystemCodes]\n    AS\n    (\n        SELECT DISTINCT TRIM(value) [SystemCode]\n        FROM STRING_SPLIT(IIF(LEN(TRIM(@SystemCodes))=0, NULL, @SystemCodes), ',')\n    ),\n\tExtractLoad AS\n\t(\n\t\tSELECT ROW_NUMBER() OVER(ORDER BY M.[SourceID]) / @BatchSize [Order], M.[SystemCode], M.[SourceID]\n\t\tFROM [dbo].[ExtractLoadManifest] M JOIN [_SystemCodes] C ON C.[SystemCode] = M.[SystemCode]\n\t\tWHERE [Enabled] = 1\n\t\tUNION\n\t\tSELECT ROW_NUMBER() OVER(ORDER BY M.[SourceID]) / @BatchSize [Order], M.[SystemCode], M.[SourceID]\n\t\tFROM [dbo].[ExtractLoadManifest] M\n\t\tWHERE [Enabled] = 1 AND (SELECT COUNT(*)\n\t\tFROM [_SystemCodes]) = 0\n\t)\n\tSELECT SystemCode, MIN([SourceID]) StartSourceID, MAX([SourceID]) EndSourceID\n\tFROM ExtractLoad\n\tGROUP BY [Order], [SystemCode]\n\tORDER BY [Order], MIN([SourceID])",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-source",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-extract-load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-extract-load').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "execute-system",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "System",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SystemCode": {
												"value": "@item().SystemCode",
												"type": "Expression"
											},
											"ParentBatchID": {
												"value": "@variables('ParentBatchID')",
												"type": "Expression"
											},
											"StartSourceID": {
												"value": "@item().StartSourceID",
												"type": "Expression"
											},
											"EndSourceID": {
												"value": "@item().EndSourceID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(pipeline().GroupId, 0,8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if-transform",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "for-each-source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('Transform')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "execute-transform",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Transform",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ParentBatchID": {
												"value": "@variables('ParentBatchID')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SystemCodes": {
						"type": "string"
					},
					"BatchSize": {
						"type": "int",
						"defaultValue": 500
					}
				},
				"variables": {
					"SystemCode": {
						"type": "String"
					},
					"ParentBatchID": {
						"type": "String"
					},
					"Transform": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "ELT-Framework"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/System')]",
				"[concat(variables('factoryId'), '/pipelines/Transform')]"
			]
		}
	]
}