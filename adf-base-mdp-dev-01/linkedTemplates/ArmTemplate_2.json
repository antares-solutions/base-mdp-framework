{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-base-mdp-dev-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/canvas-graphql-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/Canvas-API-Key?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "AzureKeyVault",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "get-domain",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/Canvas-Domain?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "AzureKeyVault",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set-url",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-domain",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentUrl",
							"value": {
								"value": "@concat(replace(\n'https://{canvas-domain}/api/graphql'\n, '{canvas-domain}', activity('get-domain').output.value)\n, '?per_page=100')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "while-next-link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "get-token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-url",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(length(variables('currentUrl')), 0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "invoke-api",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@variables('currentUrl')",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {
											"Authorization": {
												"value": "Bearer @{activity('get-token').output.value}",
												"type": "Expression"
											},
											"Content-Type": "multipart/form-data"
										},
										"body": {
											"value": "@pipeline().parameters.task.SourceQuery",
											"type": "Expression"
										}
									}
								},
								{
									"name": "save-file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "invoke-api",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@replace(replace(replace(\n'https://$STORAGE$.blob.core.windows.net$ROOT$/$guid$.json?resource=filesystem'\n,'$STORAGE$', pipeline().globalParameters.storageName)\n,'$ROOT$', variables('rootFolder'))\n,'$guid$', guid())",
											"type": "Expression"
										},
										"method": "PUT",
										"headers": {
											"x-ms-version": "2017-11-09",
											"x-ms-blob-type": "BlockBlob"
										},
										"body": {
											"value": "@{activity('invoke-api').output.data}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://storage.azure.com/"
										}
									}
								},
								{
									"name": "if-next-link",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "invoke-api",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(if(empty(activity('invoke-api').output.ADFWebActivityResponseHeaders), '', activity('invoke-api').output.ADFWebActivityResponseHeaders), 'next')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "set-done",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "currentUrl",
													"value": {
														"value": "@string('')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "set-current-url",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "currentUrl",
													"value": {
														"value": "@concat('https://', split(split(split(split(activity('invoke-api').output.ADFWebActivityResponseHeaders.Link, 'next')[0], 'current')[1], 'https://')[1], '>;')[0])",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "set-done-api-error",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "invoke-api",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentUrl",
										"value": {
											"value": "@string('')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-done-save-error",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "save-file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentUrl",
										"value": {
											"value": "@string('')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-done-next-error",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "if-next-link",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentUrl",
										"value": {
											"value": "@string('')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "set-root-folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rootFolder",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$.json', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('rootFolder')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"currentUrl": {
						"type": "String"
					},
					"rootFolder": {
						"type": "String"
					},
					"apiResponeseProperty": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/Canvas"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/canvas-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/Canvas-API-Key?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "AzureKeyVault",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "get-domain",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/Canvas-Domain?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "AzureKeyVault",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set-url",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-domain",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentUrl",
							"value": {
								"value": "@concat(replace(\npipeline().parameters.task.SourceQuery\n, '{canvas-domain}', activity('get-domain').output.value)\n, '?per_page=100')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "while-next-link",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "get-token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-url",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-api-response-property",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(length(variables('currentUrl')), 0)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "invoke-api",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@variables('currentUrl')",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "Bearer @{activity('get-token').output.value}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "save-file",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "invoke-api",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@replace(replace(replace(\n'https://$STORAGE$.blob.core.windows.net$ROOT$/$guid$.json?resource=filesystem'\n,'$STORAGE$', pipeline().globalParameters.storageName)\n,'$ROOT$', variables('rootFolder'))\n,'$guid$', guid())",
											"type": "Expression"
										},
										"method": "PUT",
										"headers": {
											"x-ms-version": "2017-11-09",
											"x-ms-blob-type": "BlockBlob"
										},
										"body": {
											"value": "@{activity('invoke-api').output[variables('apiResponeseProperty')]}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://storage.azure.com/"
										}
									}
								},
								{
									"name": "if-next-link",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "invoke-api",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(if(empty(activity('invoke-api').output.ADFWebActivityResponseHeaders), '', activity('invoke-api').output.ADFWebActivityResponseHeaders), 'next')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "set-done",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "currentUrl",
													"value": {
														"value": "@string('')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "set-current-url",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "currentUrl",
													"value": {
														"value": "@concat('https://', split(split(split(split(activity('invoke-api').output.ADFWebActivityResponseHeaders.Link, 'next')[0], 'current')[1], 'https://')[1], '>;')[0])",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "set-done-api-error",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "invoke-api",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentUrl",
										"value": {
											"value": "@string('')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-done-save-error",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "save-file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentUrl",
										"value": {
											"value": "@string('')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-done-next-error",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "if-next-link",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "currentUrl",
										"value": {
											"value": "@string('')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "set-root-folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rootFolder",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$.json', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('rootFolder')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "set-api-response-property",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "apiResponeseProperty",
							"value": {
								"value": "@json(coalesce(pipeline().parameters.task.ExtendedProperties, '{ \"ApiResponseProperty\": \"Response\" }')).ApiResponseProperty",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"currentUrl": {
						"type": "String"
					},
					"rootFolder": {
						"type": "String"
					},
					"apiResponeseProperty": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/Canvas"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/complispace-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "get-client-id",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get-secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://auth.go1.com/oauth/token",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"client_id\":\"@{activity('get-client-id').output.value}\"\n,\"client_secret\":\"@{activity('get-secret').output.value}\"\n,\"grant_type\":\"client_credentials\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-url",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "token",
							"value": {
								"value": "@activity('get-token').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get-count",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set-token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@{variables('url')}?limit=0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{variables('token')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "while-next-offset",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "set-total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('counter')), int(variables('total')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copy-data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": {
													"value": "Bearer @{variables('token')}",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "REST_Binary",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "@{variables('url')}?limit=@{variables('offset-size')}&offset=@{variables('counter')}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Json",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@replace(replace(\n'$ROOT$/$guid$.json'\n,'$ROOT$', variables('rootFolder'))\n,'$guid$', guid())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "set-counter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "set-last",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "counter",
										"value": {
											"value": "@{add(int(variables('last')), int(variables('offset-size')))}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-last",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "copy-data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "last",
										"value": {
											"value": "@variables('counter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "break-counter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "copy-data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "counter",
										"value": "999999999"
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "set-total",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "total",
							"value": {
								"value": "@{activity('get-count').output.total}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get-client-id",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/CompliSpace-ClientID?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "AzureKeyVault",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "get-secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://@{pipeline().globalParameters.keyVaultName}.vault.azure.net/secrets/CompliSpace-Secret?api-version=7.0",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "AzureKeyVault",
									"type": "LinkedServiceReference"
								}
							],
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set-url",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "url",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-root-folder",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rootFolder",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$.json', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set-root-folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('rootFolder')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"token": {
						"type": "String"
					},
					"total": {
						"type": "String"
					},
					"counter": {
						"type": "String",
						"defaultValue": "0"
					},
					"last": {
						"type": "String",
						"defaultValue": "0"
					},
					"offset-size": {
						"type": "String",
						"defaultValue": "50"
					},
					"url": {
						"type": "String"
					},
					"rootFolder": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/CompliSpace"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/create-table-from-metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "generate-create-table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \nCONCAT([CreateSchema], [CreateTableSQL]) [CreateTableSQL]\nFROM [dbo].[MetadataGenerated] S\nJOIN [dbo].[ExtractLoadManifest] R ON R.SourceSchema = S.TableSchema AND R.SourceTableName = S.TableName\nWHERE [SourceSchema]='@{pipeline().parameters.SchemaName}' AND [SourceTableName]='@{pipeline().parameters.TableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "create-table-on-target",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "generate-create-table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@{activity('generate-create-table').output.value[0].CreateSchema} @{activity('generate-create-table').output.value[0].CreateTableSQL} SELECT 1 A\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Server",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.targetKeyVaultKey",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"sourceKeyVaultKey": {
						"type": "string"
					},
					"targetKeyVaultKey": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ELT-Framework/Setup/Metadata"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFileName",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-path",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputPath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.RawPath",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set-filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(\nconcat(variables('OutputPath'), if(endswith(variables('OutputPath'), '/'), '', '/'), variables('OutputFileName'), '.parquet')\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Input-Folderpath",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFolderPath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceFolderPath",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Input-Filepath",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFilePath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceFileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-full-inputpath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input-Folderpath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Input-Filepath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFullPath",
							"value": {
								"value": "@concat(variables('InputFolderPath'),'/',variables('InputFilePath'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy-CSV",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-full-inputpath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DLS_Csv",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('InputFullPath')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "task-raw-path",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy-CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[BatchUpdate]",
							"storedProcedureParameters": {
								"BatchID": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.BatchID",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceID": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.SourceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Property": {
									"value": "RawPath",
									"type": "String"
								},
								"Value": {
									"value": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log-copy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy-CSV",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LogMessage]",
							"storedProcedureParameters": {
								"BatchStatusID": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.ID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PipelineRunID": {
									"value": null,
									"type": "String"
								},
								"ActivityType": {
									"value": "copy-data",
									"type": "String"
								},
								"Message": {
									"value": {
										"value": "@{activity('copy-CSV')}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"OutputPath": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"InputFolderPath": {
						"type": "String"
					},
					"InputFilePath": {
						"type": "String"
					},
					"InputFullPath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/DLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dv-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "if-delta",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(\n        and(\n            and(not(empty(pipeline().parameters.task.TrustedHandler)), not(contains(pipeline().parameters.task.TrustedHandler, 'null'))), \n                and(not(empty(pipeline().parameters.task.TrustedPath)), not(contains(pipeline().parameters.task.TrustedPath, 'null'))))\n        ,and(not(empty(pipeline().parameters.task.WatermarkColumn)), not(contains(pipeline().parameters.task.WatermarkColumn, 'null')))\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "high-watermark",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "set-query-clause",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@replace(\n        replace(\n                replace(\n                    '<fetch mapping=\"$A$\" distinct=\"true\" aggregate=\"true\">\n                        <entity name=\"$B$\">\n                            <attribute name=\"$C$\" alias=\"HighWatermark\" aggregate=\"max\" />                \n                        </entity>\n                    </fetch>', \n                    '$A$', pipeline().parameters.task.SourceSchema\n                ), \n                '$B$', \n                pipeline().parameters.task.SourceTableName\n            ), \n            '$C$',  \n            pipeline().parameters.task.WatermarkColumn\n            )",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DV_Server",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": {
													"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "set-query-clause",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "QueryClause",
										"value": {
											"value": "@if(and(not(empty(pipeline().parameters.task.LowWatermark)), not(contains(pipeline().parameters.task.LowWatermark, 'null'))), \n    replace(\n        replace('<filter>\n                    <condition attribute=\"$A$\" operator=\"gt\" value=\"$B$\" />\n                </filter>', '$A$', pipeline().parameters.task.WatermarkColumn)\n    ,'$B$', pipeline().parameters.task.LowWatermark), '')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "task-high-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "high-watermark",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "HighWatermark",
											"Value": {
												"value": "@{activity('high-watermark').output.firstRow.HighWatermark}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "if-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "if-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Query",
							"value": {
								"value": "@replace(\n    replace(\n        replace(\n            replace('<fetch mapping=\"$A$\"> \n                        <entity name=\"$B$\"> \n                            $C$\n                            $D$ \n                        </entity>\n                    </fetch>', \n            '$A$', \n            pipeline().parameters.task.SourceSchema\n            ),\n        '$B$',\n        pipeline().parameters.task.SourceTableName), \n    '$C$', if(not(empty(pipeline().parameters.task.SourceQuery)), pipeline().parameters.task.SourceQuery, '<all-attributes /> ')), \n'$D$', if(not(empty(variables('QueryClause'))), variables('QueryClause'), ''))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch-copy-dv",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(length(split(pipeline().parameters.task.SourceHandler, '/')), 1), pipeline().parameters.task.SourceHandler, split(pipeline().parameters.task.SourceHandler, '/')[1])",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sink-dv",
									"activities": [
										{
											"name": "copy-sink-dv",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "CommonDataServiceForAppsSource",
													"query": {
														"value": "@variables('Query')",
														"type": "Expression"
													}
												},
												"sink": {
													"type": "SqlServerSink",
													"preCopyScript": {
														"value": "BEGIN TRY EXEC('TRUNCATE TABLE [@{pipeline().parameters.task.SourceSchema}].[@{pipeline().parameters.task.SourceTableName}]') END TRY BEGIN CATCH END CATCH",
														"type": "Expression"
													},
													"writeBehavior": "insert",
													"sqlWriterUseTableLock": true,
													"tableOption": "autoCreate"
												},
												"enableStaging": false,
												"translator": {
													"value": "@pipeline().parameters.task.SourceMetaData",
													"type": "Expression"
												}
											},
											"inputs": [
												{
													"referenceName": "DV_Server",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "SQL_Server_Table",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
															"type": "Expression"
														},
														"schemaName": {
															"value": "@pipeline().parameters.task.SourceSchema",
															"type": "Expression"
														},
														"tableName": {
															"value": "@pipeline().parameters.task.SourceTableName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sink-dv-task-sink-row-count",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "copy-sink-dv",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-status-update",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Property": "SinkRowCount",
													"Value": {
														"value": "@{activity('copy-sink-dv').output.rowsCopied}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sink-dv-log-copy",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "copy-sink-dv",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-message",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"ActivityType": "copy-data",
													"Message": {
														"value": "@{activity('copy-sink-dv')}",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "copy-dv",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CommonDataServiceForAppsSource",
											"query": {
												"value": "@variables('Query')",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@pipeline().parameters.task.SourceMetaData",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DV_Server",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": {
													"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"BlobPath": {
													"value": "@variables('OutputFullPath')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "task-raw-path",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-dv",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "RawPath",
											"Value": {
												"value": "@variables('OutputFullPath')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-sink-row-count",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-dv",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "SinkRowCount",
											"Value": {
												"value": "@{activity('copy-dv').output.rowsCopied}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "log-copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-dv",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "copy-data",
											"Message": {
												"value": "@{activity('copy-dv')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"Query": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"QueryClause": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/Dataverse"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/excel-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-filename",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFileName",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-path",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputPath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.RawPath",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(\nconcat(variables('OutputPath'), if(endswith(variables('OutputPath'), '/'), '', '/'), variables('OutputFileName'), '.parquet')\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Input-Folderpath",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFolderPath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceFolderPath",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Input-Filepath",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFilePath",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceFileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-full-inputpath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Input-Folderpath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Input-Filepath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "InputFullPath",
							"value": {
								"value": "@concat(variables('InputFolderPath'),'/',variables('InputFilePath'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy-Excel",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-full-inputpath",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get-index",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DLS_Excel_index",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('InputFullPath')",
										"type": "Expression"
									},
									"sheetIndex": {
										"value": "@variables('Index')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"BlobPath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "task-raw-path",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy-Excel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[BatchUpdate]",
							"storedProcedureParameters": {
								"BatchID": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.BatchID",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceID": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.SourceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Property": {
									"value": "RawPath",
									"type": "String"
								},
								"Value": {
									"value": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "log-copy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy-Excel",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LogMessage]",
							"storedProcedureParameters": {
								"BatchStatusID": {
									"value": {
										"value": "@pipeline().parameters.TaskDetails.ID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PipelineRunID": {
									"value": null,
									"type": "String"
								},
								"ActivityType": {
									"value": "copy-data",
									"type": "String"
								},
								"Message": {
									"value": {
										"value": "@{activity('copy-Excel')}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Ctrldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "get-index",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Index",
							"value": {
								"value": "@string(json(pipeline().parameters.TaskDetails.ExtendedProperties).SheetIndex)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFileName": {
						"type": "String"
					},
					"OutputPath": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"InputFolderPath": {
						"type": "String"
					},
					"InputFilePath": {
						"type": "String"
					},
					"InputFullPath": {
						"type": "String"
					},
					"Index": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/DLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file-binary-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-file-binary",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-output-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-source-file-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-source-file-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFilePath",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-output-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-file-binary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-file-binary",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-file-binary')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"SourceFilePath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/DLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/http-binary-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-full-path",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.TaskDetails.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-url",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Url",
							"value": {
								"value": "@pipeline().parameters.TaskDetails.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "copy-http-binary",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-url",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HTTP_Binary",
								"type": "DatasetReference",
								"parameters": {
									"httpUrl": {
										"value": "@variables('Url')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "log-status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-http-binary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"BatchID": {
									"value": "@pipeline().parameters.TaskDetails.BatchID",
									"type": "Expression"
								},
								"SourceID": {
									"value": "@pipeline().parameters.TaskDetails.SourceID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-http-binary",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"BatchStatusID": {
									"value": "@pipeline().parameters.TaskDetails.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-http-binary')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TaskDetails": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"Url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/import-ingestion-csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "for-each-ingestion",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "import-file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@take(activity('import-file').output.value, if(equals(int(activity('get-config').output.firstRow.Limit), 0), 999, int(activity('get-config').output.firstRow.Limit)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "add-ingestion",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[AddIngestion]",
										"storedProcedureParameters": {
											"SystemCode": {
												"value": {
													"value": "@item().SystemCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"Schema": {
												"value": {
													"value": "@item().TableSchema",
													"type": "Expression"
												},
												"type": "String"
											},
											"Table": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Query": {
												"value": {
													"value": "@item().SourceQuery",
													"type": "Expression"
												},
												"type": "String"
											},
											"WatermarkColumn": {
												"value": {
													"value": "@item().WatermarkColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceHandler": {
												"value": {
													"value": "@item().SourceHandler",
													"type": "Expression"
												},
												"type": "String"
											},
											"RawFileExtension": {
												"value": {
													"value": "@item().RawFileExtension",
													"type": "Expression"
												},
												"type": "String"
											},
											"KeyVaultSecret": {
												"value": {
													"value": "@item().KeyVaultSecret",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExtendedProperties": {
												"value": {
													"value": "@item().ExtendedProperties",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Ctrldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "import-file",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "get-config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DLS_Csv",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "@activity('get-config').output.firstRow.Path"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "get-config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [Path], [Index], [Limit] FROM   \n( \n\tSELECT * FROM [dbo].[Config]\n\tWHERE [KeyGroup] = 'IngestionSheet'\n) T\nPIVOT(\n\tMAX([Value]) \n\tFOR [Key] IN (\n\t\t[Index], \n\t\t[Path],\n\t\t[Limit]\n\t)\n) T;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ELT-Framework/Setup"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nfs-binary-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-source-file-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFilePath",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-output-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if-file-exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set-output-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "file-exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(activity('file-exists').output.exists)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "task-raw-path-skipped",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "RawPath",
											"Value": "Skipped"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "copy-nfs-binary-load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "raw/Cewa Financials/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "NFS_Binary",
											"type": "DatasetReference",
											"parameters": {
												"systemName": {
													"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
													"type": "Expression"
												},
												"filePath": {
													"value": "@variables('SourceFilePath')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Binary",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@variables('OutputFullPath')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "task-raw-path",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-nfs-binary-load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "RawPath",
											"Value": {
												"value": "@variables('OutputFullPath')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "log-copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-nfs-binary-load",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "copy-data",
											"Message": {
												"value": "@{activity('copy-nfs-binary-load')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "set-done",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "copy-nfs-binary-load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Done",
										"value": true
									}
								}
							]
						}
					},
					{
						"name": "file-exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "set-source-file-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "NFS_Binary",
								"type": "DatasetReference",
								"parameters": {
									"systemName": {
										"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
										"type": "Expression"
									},
									"filePath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "if-delete-file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "if-file-exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(variables('DeleteFile'), variables('Done'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "delete-nfs-file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "NFS_Binary",
											"type": "DatasetReference",
											"parameters": {
												"systemName": {
													"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
													"type": "Expression"
												},
												"filePath": "@variables('SourceFilePath')"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"SourceFilePath": {
						"type": "String"
					},
					"DeleteFile": {
						"type": "Boolean",
						"defaultValue": false
					},
					"Done": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/NFS"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-23T06:15:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nfs-folder-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy-nfs-folder-load",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-output-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-source-file-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "NFS_Folder",
								"type": "DatasetReference",
								"parameters": {
									"systemName": {
										"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
										"type": "Expression"
									},
									"folderPath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-source-file-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFilePath",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-output-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-nfs-folder-load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy-nfs-folder-load",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('copy-nfs-folder-load')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"SourceFilePath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/NFS"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-23T06:15:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/s3-binary-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "s3-folder-copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set-output-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-source-file-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "raw/Cewa Financials/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "S3_Binary_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('SourceFilePath')",
										"type": "Expression"
									},
									"s3KVSecret": {
										"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DLS_Binary_Folder",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@variables('OutputFullPath')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set-source-file-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SourceFilePath",
							"value": {
								"value": "@pipeline().parameters.task.SourceQuery",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-output-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "task-raw-path",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "s3-folder-copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawPath",
								"Value": {
									"value": "@variables('OutputFullPath')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-copy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "s3-folder-copy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "copy-data",
								"Message": {
									"value": "@{activity('s3-folder-copy')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"OutputFullPath": {
						"type": "String"
					},
					"SourceFilePath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler/S3"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql-load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-base-query",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BaseQuery",
							"value": {
								"value": "@coalesce(pipeline().parameters.task.SourceQuery, \nreplace(replace('SELECT * FROM [$A$].[$B$]'\n,'$A$'\n,pipeline().parameters.task.SourceSchema)\n,'$B$'\n,pipeline().parameters.task.SourceTableName)\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "row-count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-full-path",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) [RowCount] FROM (@{variables('Query')}) T",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Server",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": "@pipeline().parameters.task.SourceKeyVaultSecret"
								}
							}
						}
					},
					{
						"name": "set-full-path",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OutputFullPath",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(\npipeline().parameters.task.RawPath\n,'$yyyy$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy'))\n,'$MM$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'MM'))\n,'$dd$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'dd'))\n,'$HH$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'HH'))\n,'$mm$', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'mm'))\n,'$guid$', guid())",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set-query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "if-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Query",
							"value": {
								"value": "@if(variables('IsDelta')\n,replace(replace(\n'SELECT * FROM ($Q$) T $W$'\n,'$Q$', variables('BaseQuery'))\n,'$W$', variables('QueryClause'))\n,variables('BaseQuery'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "if-delta",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set-base-query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set-is-delta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('IsDelta')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "low-high-watermark",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "set-watermark-column",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@replace(replace(replace(\n'SELECT COALESCE($PLW$, MIN([$WC$])) [LowWatermark],  MAX([$WC$]) [HighWatermark] FROM ($Q$) T'\n,'$PLW$', if(empty(pipeline().parameters.task.LowWatermark), 'NULL', concat('''', pipeline().parameters.task.LowWatermark, '''')))\n,'$WC$', variables('WatermarkColumn'))\n,'$Q$', variables('BaseQuery'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_Server",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": "@pipeline().parameters.task.SourceKeyVaultSecret"
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "set-watermark-column",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "WatermarkColumn",
										"value": {
											"value": "@pipeline().parameters.task.WatermarkColumn",
											"type": "Expression"
										}
									}
								},
								{
									"name": "set-query-clause",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "QueryClause",
										"value": {
											"value": "WHERE @{variables('WatermarkColumn')} > '@{activity('low-high-watermark').output.firstRow.LowWatermark}' AND @{variables('WatermarkColumn')} <= '@{activity('low-high-watermark').output.firstRow.HighWatermark}'",
											"type": "Expression"
										}
									}
								},
								{
									"name": "task-low-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "LowWatermark",
											"Value": {
												"value": "@{activity('low-high-watermark').output.firstRow.LowWatermark}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-high-watermark",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "low-high-watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "LowWatermark",
											"Value": {
												"value": "@{activity('low-high-watermark').output.firstRow.HighWatermark}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set-is-delta",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "IsDelta",
							"value": {
								"value": "@not(empty(pipeline().parameters.task.WatermarkColumn))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch-copy-sql",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "task-source-row-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(equals(length(split(pipeline().parameters.task.SourceHandler, '/')), 1), pipeline().parameters.task.SourceHandler, split(pipeline().parameters.task.SourceHandler, '/')[1])",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sink-sql",
									"activities": [
										{
											"name": "copy-sink-sql",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 3,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [
												{
													"name": "Destination",
													"value": "raw/Cewa Financials/"
												}
											],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "@variables('Query')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SqlServerSink",
													"preCopyScript": {
														"value": "BEGIN TRY EXEC('TRUNCATE TABLE [@{pipeline().parameters.task.SourceSchema}].[@{pipeline().parameters.task.SourceTableName}]') END TRY BEGIN CATCH END CATCH",
														"type": "Expression"
													},
													"writeBehavior": "insert",
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "SQL_Server",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "SQL_Server_Table",
													"type": "DatasetReference",
													"parameters": {
														"kvSecret": {
															"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
															"type": "Expression"
														},
														"schemaName": {
															"value": "@pipeline().parameters.task.SourceSchema",
															"type": "Expression"
														},
														"tableName": {
															"value": "@pipeline().parameters.task.SourceTableName",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sink-sql-task-sink-row-count",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "copy-sink-sql",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-status-update",
													"type": "PipelineReference"
												},
												"waitOnCompletion": false,
												"parameters": {
													"BatchID": {
														"value": "@pipeline().parameters.task.BatchID",
														"type": "Expression"
													},
													"SourceID": {
														"value": "@pipeline().parameters.task.SourceID",
														"type": "Expression"
													},
													"Property": "SinkRowCount",
													"Value": {
														"value": "@{activity('copy-sink-sql').output.rowsCopied}",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sink-sql-log-copy",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "copy-sink-sql",
													"dependencyConditions": [
														"Completed"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "log-message",
													"type": "PipelineReference"
												},
												"waitOnCompletion": false,
												"parameters": {
													"BatchStatusID": {
														"value": "@pipeline().parameters.task.ID",
														"type": "Expression"
													},
													"ActivityType": "copy-data",
													"Message": {
														"value": "@{activity('copy-sink-sql')}",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "copy-sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Destination",
											"value": "raw/Cewa Financials/"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@variables('Query')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SQL_Server",
											"type": "DatasetReference",
											"parameters": {
												"kvSecret": {
													"value": "@pipeline().parameters.task.SourceKeyVaultSecret",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DLS_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"BlobPath": {
													"value": "@variables('OutputFullPath')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "task-raw-path",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "RawPath",
											"Value": {
												"value": "@variables('OutputFullPath')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "task-sink-row-count",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-status-update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"Property": "SinkRowCount",
											"Value": {
												"value": "@{activity('copy-sql').output.rowsCopied}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "log-copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "copy-sql",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "log-message",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"ID": {
												"value": "@pipeline().parameters.task.ID",
												"type": "Expression"
											},
											"ActivityType": "copy-data",
											"Message": {
												"value": "@{activity('copy-sql')}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "task-source-row-count",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "row-count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "SourceRowCount",
								"Value": {
									"value": "@{activity('row-count').output.firstRow.RowCount}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-count",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "row-count",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "row-count",
								"Message": {
									"value": "@{activity('row-count')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"variables": {
					"Query": {
						"type": "String"
					},
					"OutputFullPath": {
						"type": "String"
					},
					"WatermarkColumn": {
						"type": "String"
					},
					"BaseQuery": {
						"type": "String"
					},
					"QueryClause": {
						"type": "String"
					},
					"IsDelta": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "ELT-Framework/SourceHandler"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/store-table-metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fetch-source-metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_SCHEMA,TABLE_NAME,COLUMN_NAME,ORDINAL_POSITION,IS_NULLABLE,DATA_TYPE,CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION,NUMERIC_SCALE FROM information_schema.columns (NOLOCK) WHERE TABLE_NAME = '@{pipeline().parameters.TableName}' and TABLE_SCHEMA = '@{pipeline().parameters.SchemaName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Server",
								"type": "DatasetReference",
								"parameters": {
									"kvSecret": {
										"value": "@pipeline().parameters.sourceKeyVaultKey",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "store-metadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "fetch-source-metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "UPDATE [dbo].[ExtractLoadManifest] SET [SourceMetaData]= '@{activity('fetch-source-metadata').output.value}' WHERE  [SourceTableName] = '@{pipeline().parameters.TableName}'  \nAND [SourceSchema] = '@{pipeline().parameters.SchemaName}' SELECT 1 A",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"sourceKeyVaultKey": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ELT-Framework/Setup/Metadata"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Curated-Parallel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "for-each-curated",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(pipeline().parameters.taskList)",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "execute-curated",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Curated",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"taskList": {
						"type": "object"
					}
				},
				"variables": {
					"var1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/Zone"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch-source-handler",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "log-status-start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@split(pipeline().parameters.task.SourceHandler, '/')[0]",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "sql-load",
									"activities": [
										{
											"name": "execute-sql-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "sql-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "csv-load",
									"activities": [
										{
											"name": "execute-csv-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "csv-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TaskDetails": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "excel-load",
									"activities": [
										{
											"name": "execute-excel-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "excel-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TaskDetails": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "http-binary-load",
									"activities": [
										{
											"name": "execute-http-binary-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "http-binary-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TaskDetails": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "file-binary-load",
									"activities": [
										{
											"name": "execute-file-binary-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "file-binary-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "canvas-load",
									"activities": [
										{
											"name": "canvas-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "canvas-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "canvas-graphql-load",
									"activities": [
										{
											"name": "execute-canvas-graphql-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "canvas-graphql-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "canvas-graphql-load-by-course",
									"activities": [
										{
											"name": "execute-canvas-graphql-load-by-course",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "canvas-graphql-load-by-course",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "s3-binary-load",
									"activities": [
										{
											"name": "execute-s3-binary-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "s3-binary-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "dv-load",
									"activities": [
										{
											"name": "execute-dv-load",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "dv-load",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"task": {
														"value": "@pipeline().parameters.task",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "if-raw-handler",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "task-status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(empty(pipeline().parameters.task.RawHandler)), \n    and(not(equals(activity('task-status').output.firstRow.SinkRowCount, null)),\n        greater(activity('task-status').output.firstRow.SinkRowCount, 0))\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "raw-databricks",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "/ELT-Framework/Zone/@{pipeline().parameters.task.RawHandler}",
											"type": "Expression"
										},
										"baseParameters": {
											"rawPath": {
												"value": "@activity('task-status').output.firstRow.RawPath",
												"type": "Expression"
											},
											"task": {
												"value": "@{pipeline().parameters.task}",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks_defaultCluster",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "log-status-start",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStartDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStatus",
								"Value": "Fail",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawStatus",
								"Value": "Success",
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "log-status-end-fail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-status-update",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"Property": "RawEndDTS",
								"Value": {
									"value": "@formatDateTime(convertTimeZone(utcnow(), 'UTC', 'AUS Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								},
								"TableName": "ExtractLoadStatus"
							}
						}
					},
					{
						"name": "task-status",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "switch-source-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [dbo].[ExtractLoadStatus] WHERE [BatchID] = '@{pipeline().parameters.task.BatchID}' AND [SourceID] = '@{pipeline().parameters.task.SourceID}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "log-databricks-failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "raw-databricks",
								"Message": {
									"value": "@{activity('raw-databricks')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "log-databricks-success",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "if-raw-handler",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "log-message",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"ID": {
									"value": "@pipeline().parameters.task.ID",
									"type": "Expression"
								},
								"ActivityType": "raw-databricks",
								"Message": {
									"value": "@{activity('raw-databricks')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"task": {
						"type": "object"
					}
				},
				"folder": {
					"name": "ELT-Framework/Zone"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sql-load')]",
				"[concat(variables('factoryId'), '/pipelines/csv-load')]",
				"[concat(variables('factoryId'), '/pipelines/excel-load')]",
				"[concat(variables('factoryId'), '/pipelines/http-binary-load')]",
				"[concat(variables('factoryId'), '/pipelines/file-binary-load')]",
				"[concat(variables('factoryId'), '/pipelines/canvas-load')]",
				"[concat(variables('factoryId'), '/pipelines/canvas-graphql-load')]",
				"[concat(variables('factoryId'), '/pipelines/s3-binary-load')]",
				"[concat(variables('factoryId'), '/pipelines/dv-load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Run-Trusted-Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-tasks",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\tSELECT S.BatchID, S.ID, S.LowWatermark\n\t,R.[SourceID]\n    ,R.[SystemCode]\n    ,[SourceSchema]\n    ,[SourceTableName]\n    ,[SourceQuery]\n    ,[SourceFolderPath]\n    ,[SourceFileName]\n    ,[SourceKeyVaultSecret]\n    ,[SourceHandler]\n    ,[LoadType]\n    ,[BusinessKeyColumn]\n    ,[WatermarkColumn]\n    ,[RawHandler]\n    ,R.[RawPath]\n    ,[TrustedHandler]\n    ,[TrustedPath]\n    ,[DestinationSchema]\n    ,[DestinationTableName]\n    ,[DestinationKeyVaultSecret]\n    ,[ExtendedProperties]\n\tFROM [dbo].[ExtractLoadStatus] S\n\tJOIN [dbo].[ExtractLoadManifest] R ON R.SourceID = S.SourceID\n\tWHERE \n\tS.BatchID = '@{pipeline().parameters.BatchId}'\n\tAND S.SystemCode = '@{pipeline().parameters.SystemCode}'\n\tAND R.[Enabled] = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-trusted",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute-trusted",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Trusted",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "end-system",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "for-each-trusted",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "UPDATE U\nSET [EndedDTS] = CONVERT(DATETIME, CONVERT(DATETIMEOFFSET, GETDATE()) AT TIME ZONE 'AUS Eastern Standard Time')\nFROM [dbo].[ExtractLoadStatus] U\nWHERE BatchID = '@{pipeline().parameters.BatchId}'\nAND SystemCode = '@{pipeline().parameters.SystemCode}'\nSELECT 1 A",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchId": {
						"type": "string"
					},
					"SystemCode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ELT-Framework/Management/Rerun Main Pipeline Individually"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/update-source-metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get-tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [SourceID]\n,[SystemCode]\n,[SourceSchema]\n,[SourceTableName]\n,[SourceKeyVaultSecret]\nFROM [dbo].[ExtractLoadManifest]\nWHERE\nSourceHandler = 'sql-load'\nAND SystemCode = '@{pipeline().parameters.SystemCode}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "execute-update-metadata",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "store-table-metadata",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SchemaName": {
												"value": "@item().SourceSchema",
												"type": "Expression"
											},
											"TableName": {
												"value": "@item().SourceTableName",
												"type": "Expression"
											},
											"sourceKeyVaultKey": {
												"value": "@item().SourceKeyVaultSecret",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update-source-query",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "execute-update-metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "UPDATE R\nSET [SourceQuery] = S.[SelectSQL]\nFROM [dbo].[MetadataGenerated] S\nJOIN [dbo].[ExtractLoadManifest] R ON R.[SourceSchema] = S.[TableSchema] AND R.[SourceTableName] = S.[TableName]\nWHERE [SourceSchema]='@{item().SourceSchema}' AND [SourceTableName]='@{item().SourceTableName}';\nSELECT 1 A",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_ControlDB",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SystemCode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ELT-Framework/Setup/Metadata"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/store-table-metadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Run-Raw-Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set-parent-batch",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParentBatchID",
							"value": {
								"value": "@substring(pipeline().GroupId, 0,8)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get-tasks",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set-parent-batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[ExtractLoadInit]",
								"storedProcedureParameters": {
									"BatchID": {
										"value": {
											"value": "@variables('ParentBatchID')",
											"type": "Expression"
										}
									},
									"SystemCode": {
										"value": {
											"value": "@pipeline().parameters.SystemCode",
											"type": "Expression"
										}
									},
									"StartSourceID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.StartSourceID",
											"type": "Expression"
										}
									},
									"EndSourceID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.EndSourceID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_ControlDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "for-each-raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get-tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get-tasks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "execute-raw",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Raw",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"task": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SystemCode": {
						"type": "string"
					},
					"StartSourceID": {
						"type": "string"
					},
					"EndSourceID": {
						"type": "string"
					}
				},
				"variables": {
					"ParentBatchID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ELT-Framework/Management/Rerun Main Pipeline Individually"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-03T14:17:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Raw')]"
			]
		}
	]
}